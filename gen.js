// Generated by CoffeeScript 1.9.3
var algEngine,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  slice = [].slice;

algEngine = {
  _ring: function(s, f, l, i) {
    var cycle;
    if (f > 2) {
      l = s - 1 - l;
    }
    cycle = (function() {
      switch (f % 3) {
        case 0:
          return [[1, l, i], [2, l, i], [4, l, i], [5, l, i]];
        case 1:
          return [[2, i, s - 1 - l], [0, i, s - 1 - l], [5, s - 1 - i, l], [3, i, s - 1 - l]];
        default:
          return [[0, s - 1 - l, i], [1, i, l], [3, l, s - 1 - i], [4, s - 1 - i, s - 1 - l]];
      }
    })();
    if (f < 3) {
      return cycle;
    } else {
      return cycle.reverse();
    }
  },
  _face: function(s, f, i, j) {
    return [[f, i, j], [f, j, s - 1 - i], [f, s - 1 - i, s - 1 - j], [f, s - 1 - j, i]];
  },
  _deg: function(d) {
    switch (d) {
      case "":
        return function(c) {
          return [c];
        };
      case "_":
        return function(c) {
          return [c.reverse()];
        };
      default:
        return function(c) {
          return [[c[0], c[2]], [c[1], c[3]]];
        };
    }
  },
  _getCycles: function(s, f, ls, d) {
    var cycles, i, j, k, l, len, m, o, p, q, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, t;
    cycles = [];
    for (k = 0, len = ls.length; k < len; k++) {
      l = ls[k];
      for (i = m = 0, ref = s; 0 <= ref ? m < ref : m > ref; i = 0 <= ref ? ++m : --m) {
        Array.prototype.push.apply(cycles, (this._deg(d))(this._ring(s, f, l, i)));
      }
    }
    if (indexOf.call(ls, 0) >= 0) {
      for (i = o = 0, ref1 = (s - 1) / 2; 0 <= ref1 ? o < ref1 : o > ref1; i = 0 <= ref1 ? ++o : --o) {
        for (j = p = ref2 = i, ref3 = s - 1 - i; ref2 <= ref3 ? p < ref3 : p > ref3; j = ref2 <= ref3 ? ++p : --p) {
          Array.prototype.push.apply(cycles, (this._deg(d))(this._face(s, f, i, j)));
        }
      }
    }
    if (ref4 = s - 1, indexOf.call(ls, ref4) >= 0) {
      for (i = q = 0, ref5 = (s - 1) / 2; 0 <= ref5 ? q < ref5 : q > ref5; i = 0 <= ref5 ? ++q : --q) {
        for (j = t = ref6 = i, ref7 = s - 1 - i; ref6 <= ref7 ? t < ref7 : t > ref7; j = ref6 <= ref7 ? ++t : --t) {
          Array.prototype.push.apply(cycles, (this._deg(d))((this._face(s, (f + 3) % 6, i, j)).reverse()));
        }
      }
    }
    return cycles;
  },
  _getStickerMap: function(s, f, ls, d) {
    var c, cycle, i, k, len, len1, m, ref, sm;
    sm = (function() {
      var k, ref, results;
      results = [];
      for (i = k = 0, ref = 6 * s * s; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        results.push(i);
      }
      return results;
    })();
    ref = this._getCycles(s, f, ls, d);
    for (k = 0, len = ref.length; k < len; k++) {
      cycle = ref[k];
      cycle = (function() {
        var len1, m, results;
        results = [];
        for (m = 0, len1 = cycle.length; m < len1; m++) {
          c = cycle[m];
          results.push(c[0] * s * s + c[1] * s + c[2]);
        }
        return results;
      })();
      for (i = m = 0, len1 = cycle.length; m < len1; i = ++m) {
        c = cycle[i];
        sm[c] = cycle[i === cycle.length - 1 ? 0 : i + 1];
      }
    }
    return sm;
  },
  _compose: function(sms) {
    var k, len, ref, results, sm, x;
    ref = sms[0];
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      x = ref[k];
      results.push((function() {
        var len1, m, ref1;
        ref1 = sms.slice(1);
        for (m = 0, len1 = ref1.length; m < len1; m++) {
          sm = ref1[m];
          x = sm[x];
        }
        return x;
      })());
    }
    return results;
  },
  _getAlgStickerMap: function(s, alg) {
    var invert, move, sm;
    invert = false;
    if (alg.match(/^!/)) {
      invert = true;
    }
    alg = alg.replace(/^!|\s/g, "").replace(/'2|2'/g, "2").replace(/'/g, "_").split(/(?=[URFDLBurfdlbSEMyxz])/);
    sm = this._compose((function() {
      var k, len, results;
      results = [];
      for (k = 0, len = alg.length; k < len; k++) {
        move = alg[k];
        results.push(this._moves[s][move]);
      }
      return results;
    }).call(this));
    if (invert === true) {
      return this._invert(sm);
    } else {
      return sm;
    }
  },
  _invert: function(sm) {
    var i, k, len, r, x;
    r = [];
    for (i = k = 0, len = sm.length; k < len; i = ++k) {
      x = sm[i];
      r[x] = i;
    }
    return r;
  },
  _power: function(sm, n) {
    var i, k, ref, results;
    if (n === 0) {
      return (function() {
        results = [];
        for (var k = 0, ref = sm.length; 0 <= ref ? k < ref : k > ref; 0 <= ref ? k++ : k--){ results.push(k); }
        return results;
      }).apply(this);
    }
    if (n < 0) {
      return this._power(this._invert(sm), -n);
    }
    return this._compose((function() {
      var m, ref1, results1;
      results1 = [];
      for (i = m = 1, ref1 = n; 1 <= ref1 ? m <= ref1 : m >= ref1; i = 1 <= ref1 ? ++m : --m) {
        results1.push(sm);
      }
      return results1;
    })());
  },
  go: function(s, start, alg) {
    var i, k, len, r, sm, x;
    sm = this._getAlgStickerMap(s, alg);
    r = [];
    for (i = k = 0, len = sm.length; k < len; i = ++k) {
      x = sm[i];
      r[x] = start[i];
    }
    return r;
  },
  _moves: [],
  init: function() {
    var d, f, i, k, len, results, s, sizes;
    sizes = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (sizes.length === 0) {
      sizes = [2, 3, 4, 5];
    }
    results = [];
    for (k = 0, len = sizes.length; k < len; k++) {
      s = sizes[k];
      this._moves[s] = {};
      results.push((function() {
        var len1, len2, len3, m, o, p, q, ref, ref1, ref2, ref3, results1, results2;
        ref = ["", "_", "2"];
        results1 = [];
        for (m = 0, len1 = ref.length; m < len1; m++) {
          d = ref[m];
          ref1 = "URFDLB".split("");
          for (i = o = 0, len2 = ref1.length; o < len2; i = ++o) {
            f = ref1[i];
            this._moves[s][f + d] = this._getStickerMap(s, i, [0], d);
            this._moves[s][f + "w" + d] = this._getStickerMap(s, i, [0, 1], d);
            this._moves[s][f.toLowerCase() + d] = this._getStickerMap(s, i, (s === 3 ? [0, 1] : [1]), d);
          }
          ref2 = "SEM".split("");
          for (i = p = 0, len3 = ref2.length; p < len3; i = ++p) {
            f = ref2[i];
            this._moves[s][f + d] = this._getStickerMap(s, i + 2, (s % 2 ? [(s - 1) / 2] : [s / 2 - 1, s / 2]), d);
            this._moves[s][f.toLowerCase() + d] = this._getStickerMap(s, i + 2, (function() {
              results2 = [];
              for (var q = 1, ref3 = s - 2; 1 <= ref3 ? q <= ref3 : q >= ref3; 1 <= ref3 ? q++ : q--){ results2.push(q); }
              return results2;
            }).apply(this), d);
          }
          results1.push((function() {
            var len4, ref4, results3, results4, t, u;
            ref4 = "yxz".split("");
            results3 = [];
            for (i = t = 0, len4 = ref4.length; t < len4; i = ++t) {
              f = ref4[i];
              results3.push(this._moves[s][f + d] = this._getStickerMap(s, i, (function() {
                results4 = [];
                for (var u = 0; 0 <= s ? u < s : u > s; 0 <= s ? u++ : u--){ results4.push(u); }
                return results4;
              }).apply(this), d));
            }
            return results3;
          }).call(this));
        }
        return results1;
      }).call(this));
    }
    return results;
  },
  _debug: {
    subtract: function(a, b) {
      var i, k, len, results, x;
      results = [];
      for (i = k = 0, len = a.length; k < len; i = ++k) {
        x = a[i];
        results.push(a[i] - b[i]);
      }
      return results;
    },
    visualcube: function(sm, s) {
      var f, i, j, k, len, m, r, ref, ref1;
      if (s == null) {
        s = 3;
      }
      r = [];
      ref = "urfdlb".split("");
      for (i = k = 0, len = ref.length; k < len; i = ++k) {
        f = ref[i];
        for (j = m = 0, ref1 = s * s; 0 <= ref1 ? m < ref1 : m > ref1; j = 0 <= ref1 ? ++m : --m) {
          r[sm[i * s * s + j]] = f;
        }
      }
      return "cube.crider.co.uk/visualcube.php?fmt=gif&fd=" + r.join("");
    }
  }
};
