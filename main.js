// Generated by CoffeeScript 1.9.3
var gap, mux, stages, sticker, thick;

algEngine.init(2, 3, 4, 5);

thick = .025;

gap = .075;

sticker = function(color) {
  var shape;
  shape = new seen.Shape("sticker", seen.Shapes.mapPointsToSurfaces([seen.P(0, 0, 0), seen.P(gap, gap, thick), seen.P(0, 1, 0), seen.P(gap, 1 - gap, thick), seen.P(1, 0, 0), seen.P(1 - gap, gap, thick), seen.P(1, 1, 0), seen.P(1 - gap, 1 - gap, thick)], [[0, 1, 3, 2], [5, 4, 6, 7], [1, 0, 4, 5], [2, 3, 7, 6], [3, 1, 5, 7], [0, 2, 6, 4]])).fill(seen.Colors.rgb(0, 0, 0, 255));
  shape.surfaces[4].fill(seen.Colors.hex(color));
  return shape;
};

stages = function(s, stage) {
  var i, l, len, len1, len2, len3, m, n, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, results, results1;
  switch (stage) {
    case "f2l":
      results = [];
      for (i = l = 0, ref = 6 * s * s; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
        results.push(!(i < s * s || (i % (s * s) < s && Math.floor(i / (s * s)) % 3 !== 0)));
      }
      return results;
    case "oll":
      results1 = [];
      for (i = m = 0, ref1 = 6 * s * s; 0 <= ref1 ? m < ref1 : m > ref1; i = 0 <= ref1 ? ++m : --m) {
        results1.push(!(i % (s * s) < s && Math.floor(i / (s * s)) % 3 !== 0));
      }
      return results1;
    case "3_f2l_3":
      r = (function() {
        var n, ref2, results2;
        results2 = [];
        for (i = n = 0, ref2 = 6 * s * s; 0 <= ref2 ? n < ref2 : n > ref2; i = 0 <= ref2 ? ++n : --n) {
          results2.push(!(i < s * s || (i % (s * s) < s && Math.floor(i / (s * s)) % 3 !== 0)));
        }
        return results2;
      })();
      ref2 = [12, 15, 23, 26, 29, 21, 24, 41, 44, 27, 14, 17, 48, 51, 35];
      for (n = 0, len = ref2.length; n < len; n++) {
        i = ref2[n];
        r[i] = false;
      }
      return r;
    case "3_f2l_2":
      r = (function() {
        var o, ref3, results2;
        results2 = [];
        for (i = o = 0, ref3 = 6 * s * s; 0 <= ref3 ? o < ref3 : o > ref3; i = 0 <= ref3 ? ++o : --o) {
          results2.push(!(i < s * s || (i % (s * s) < s && Math.floor(i / (s * s)) % 3 !== 0)));
        }
        return results2;
      })();
      ref3 = [12, 15, 23, 26, 29, 21, 24, 41, 44, 27];
      for (o = 0, len1 = ref3.length; o < len1; o++) {
        i = ref3[o];
        r[i] = false;
      }
      return r;
    case "3_f2l_sm":
      r = (function() {
        var p, ref4, results2;
        results2 = [];
        for (i = p = 0, ref4 = 6 * s * s; 0 <= ref4 ? p < ref4 : p > ref4; i = 0 <= ref4 ? ++p : --p) {
          results2.push(!(i < s * s || (i % (s * s) < s && Math.floor(i / (s * s)) % 3 !== 0)));
        }
        return results2;
      })();
      ref4 = [12, 15, 23, 26, 29, 39, 42, 50, 53, 33];
      for (p = 0, len2 = ref4.length; p < len2; p++) {
        i = ref4[p];
        r[i] = false;
      }
      return r;
    case "3_f2l_1":
      r = (function() {
        var q, ref5, results2;
        results2 = [];
        for (i = q = 0, ref5 = 6 * s * s; 0 <= ref5 ? q < ref5 : q > ref5; i = 0 <= ref5 ? ++q : --q) {
          results2.push(!(i < s * s || (i % (s * s) < s && Math.floor(i / (s * s)) % 3 !== 0)));
        }
        return results2;
      })();
      ref5 = [12, 15, 23, 26, 29];
      for (q = 0, len3 = ref5.length; q < len3; q++) {
        i = ref5[q];
        r[i] = false;
      }
      return r;
  }
};

mux = function(id, alg, stage, size, width, height, scheme) {
  var context, dragger, dum, fc, group, i, j, k, l, len, m, n, o, ref, ref1, ref2, scene, sm, x;
  if (alg == null) {
    alg = "";
  }
  if (size == null) {
    size = 3;
  }
  if (width == null) {
    width = 100;
  }
  if (height == null) {
    height = 100;
  }
  if (scheme == null) {
    scheme = "yrbwog";
  }
  sm = (function() {
    var l, ref, results;
    results = [];
    for (i = l = 0, ref = 6 * size * size; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
      results.push(Math.floor(i / (size * size)));
    }
    return results;
  })();
  if (stage != null) {
    console.log(stage);
    ref = stages(size, stage);
    for (i = l = 0, len = ref.length; l < len; i = ++l) {
      x = ref[i];
      if (x === false) {
        sm[i] = 6;
      }
    }
  }
  console.log(sm);
  if (alg.replace(/\s/g, "").match(/^!?(?:(?:[URFDLB]w?|[urfdlbEMSxyz])(?:'2?|2'?)?)*$/)) {
    sm = algEngine.go(size, sm, alg);
  } else {
    alert("Invalid alg: " + alg);
    return;
  }
  dum = ["#ffff00", "#ff0000", "#0000ff", "#ffffff", "#ffa500", "#00ff00", "#888888"];
  console.log(sm);
  fc = [];
  for (i = m = 0; m <= 5; i = ++m) {
    fc[i] = [];
    for (j = n = 0, ref1 = size; 0 <= ref1 ? n < ref1 : n > ref1; j = 0 <= ref1 ? ++n : --n) {
      fc[i][j] = [];
      for (k = o = 0, ref2 = size; 0 <= ref2 ? o < ref2 : o > ref2; k = 0 <= ref2 ? ++o : --o) {
        fc[i][j][k] = dum[sm[i * size * size + j * size + k]];
      }
    }
  }
  $("#" + id).attr({
    width: width,
    height: height
  });
  scene = new seen.Scene({
    model: seen.Models["default"](),
    viewport: seen.Viewports.center(width, height)
  });
  scene.camera.projection = seen.Projections.perspectiveFov(50, 1);
  context = seen.Context(id, scene).render();
  group = scene.model.append().scale(width / (size * 4));
  group = group.roty(-Math.PI / 5);
  group = group.rotx(Math.PI / 6);
  dragger = new seen.Drag($("#" + id)[0]);
  dragger.on('drag.rotate', function(e) {
    var ref3, xform;
    xform = (ref3 = seen.Quaternion).xyToTransform.apply(ref3, e.offsetRelative);
    group.transform(xform);
    return context.render();
  });
  $("#" + id).data({
    scene: scene,
    context: context,
    group: group,
    dragger: dragger,
    draw: function() {
      var p, q, ref3, ref4, stickers;
      stickers = [];
      for (i = p = 0, ref3 = size; 0 <= ref3 ? p < ref3 : p > ref3; i = 0 <= ref3 ? ++p : --p) {
        for (j = q = 0, ref4 = size; 0 <= ref4 ? q < ref4 : q > ref4; j = 0 <= ref4 ? ++q : --q) {
          k = size / 2;
          stickers.push(sticker(fc[0][i][j]).translate(i - k, j - k, k).rotz(-Math.PI / 2).rotx(-Math.PI / 2));
          stickers.push(sticker(fc[1][i][j]).translate(i - k, j - k, k).rotz(-Math.PI / 2).roty(Math.PI / 2));
          stickers.push(sticker(fc[2][i][j]).translate(i - k, j - k, k).rotz(-Math.PI / 2));
          stickers.push(sticker(fc[3][i][j]).translate(i - k, j - k, k).rotz(-Math.PI / 2).rotx(Math.PI / 2));
          stickers.push(sticker(fc[4][i][j]).translate(i - k, j - k, k).rotz(-Math.PI / 2).roty(-Math.PI / 2));
          stickers.push(sticker(fc[5][i][j]).translate(i - k, j - k, k).rotz(-Math.PI / 2).roty(Math.PI));
        }
      }
      group.children = stickers;
      scene.shader = seen.Shaders["flat"]();
      console.log("loading ");
      return context.render();
    }
  });
  return $("#" + id).data().draw();
};

$(function() {
  return $("canvas[data-alg]").each(function(index) {
    if ($(this).attr("id") == null) {
      $(this).attr("id", "mux" + index);
    }
    return mux($(this).attr("id"), "!" + $(this).attr("data-alg"), $(this).attr("data-stage"), $(this).attr("data-cube"));
  });
});
